from numpy import *

def loadDataSet()://加载数据并处理成两个列表
    dataMat=[];lablMat=[]
    fr=open('testSet.txt')
    for line in fr.readlines():
        lineArr=line.strip().split()
        dataMat.append([1.0,float(lineArr[0]),float(lineArr[1])])
        lablMat.append(int(lineArr[2]))
    return dataMat,lablMat

def sigmoid(inX)://sigmoid函数
    return 1.0/(1+exp(-inX))

def gradAscent(dataMatIn,classLabels)://梯度下降法
    dataMatrix=mat(dataMatIn)//列表矩阵化
    labelMat=mat(classLabels).transpose()
    m,n=shape(dataMatrix)
    alpha=0.001
    maxCycles=500
    weights=ones((n,1))
    for k in range(maxCycles):
        h=sigmoid(dataMatrix*weights)
        error=(labelMat-h)
        weights=weights+alpha*dataMatrix.transpose()*error
    return weights

def plotBestFit(wei)://画图（传入一个梯度下降法下降好的矩阵）
    import matplotlib.pyplot as plt
    weights=wei.getA()
    dataMat,labelMat=loadDataSet()
    dataArr=array(dataMat)
    n=shape(dataArr)[0]
    xcord1=[];ycord1=[]
    xcord2=[];ycord2=[]
    for i in range(n):
        if int(labelMat[i])==1:
            xcord1.append(dataArr[i,1])
            ycord1.append(dataArr[i,2])
        else:
            xcord2.append(dataArr[i,1])
            ycord2.append(dataArr[i,2])
    fig=plt.figure()
    ax=fig.add_subplot(111)
    ax.scatter(xcord1,ycord1,s=30,c='red',marker='s')
    ax.scatter(xcord2,ycord2,s=30,c='green')
    x=arange(-3.0,3.0,0.1)
    y=(-weights[0]-weights[1]*x)/weights[2]
    ax.plot(x,y)
    plt.xlabel('X1');plt.xlabel('X2');
    plt.show()
    
def sample()://便利函数
    dataArr,labelMat=loadDataSet()
    print(gradAscent(dataArr,labelMat))

if __name__=='__main__'://main()
    sample()

