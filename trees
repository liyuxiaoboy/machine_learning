from math import log
import operator

def calcShannonEnt(dataset)://计算香农熵
    numentries=len(dataset)//计算数据总量（在这里定义是为了节省时间）
    labelcounts={}//字典
    for featvec in dataset:
        currentlabel=featvec[-1]//提取特征点的最后一个信息，就是标签
        if currentlabel not in labelcounts.keys():
            labelcounts[currentlabel]=0
        labelcounts[currentlabel]+=1
    shannonent=0.0
    for key in labelcounts:
        prob=float(labelcounts[key])/numentries//计算概率
        shannonent-=prob*log(prob,2)

    return shannonent

def createDataSet()://创建一个测试数据
    dataset=[[1,1,'yes'],[1,1,'yes'],[1,0,'no'],[0,1,'no'],[0,1,'no']]
    labels=['no surfacing','fippers']
    return dataset,labels

def splitDataSet(dataset,axis,value)://按照某一特征重新划分数据集 axis是特征所在位置 value是特征取值
    retdataset=[]
    for featvec in dataset:
        if featvec[axis]==value:
            reducedfeatvec=featvec[:axis]//提取axis之前的特征
            reducedfeatvec.extend(featvec[axis+1:])//提取axis之后的特征
            retdataset.append(reducedfeatvec)
    return retdataset

def chooseBestFeatureToSplit(dataset)://返回最好的分组标准
    numfeatures=len(dataset[0])-1//特征数量
    baseentropy=calcShannonEnt(dataset)//计算初始熵
    bestinfogain=0.0
    bestfeature=-1
    for i in range(numfeatures):
        featlist=[example[i] for example in dataset]//取出第i个特征做一个列表
        uniquevals=set(featlist)//利用set（）做出唯一数据
        newentropy=0.0
        for value in uniquevals:
            subdataset=splitDataSet(dataset,i,value)//按特定特征划分数据
            prob=len(subdataset)/float(len(dataset))
            newentropy+=prob*calcShannonEnt(subdataset)//计算熵
        infogain=baseentropy-newentropy
        if(infogain > bestinfogain):
            bestinfogain=infogain//更新
            bestfeature=i
    return bestfeature
    
def maiorityCnt(classList)://选取出现最多的标签作为主标签
    classCount={}
    for vote in classList:
        if vote not in classCount.keys():
            classCount[vote]=0
        classCount[vote]+=1
    sortedClassCount=sorted(classCount.items(),key=operator.itemgetter(1),reverse=True)
    return  sortedClassCount[0][0]

def createTree(dataSet,labels)://创建决策树
    classList=[example[-1] for example in dataSet ]
    if classList.count(classList[0])==len(classList):
        return classList[0]
    if len(dataSet[0])==1:
        return maiorityCnt(classList)

    bestFeat=chooseBestFeatureToSplit(dataSet)
    bestFeatLabel=labels[bestFeat]

    myTree={bestFeatLabel:{}}
    del(labels[bestFeat])

    feaValues=[example[bestFeat] for example in dataSet]
    uniqueValues=set(feaValues)

    for value in uniqueValues:
        subLabels=labels[:]
        myTree[bestFeatLabel][value]=createTree(splitDataSet(dataSet,bestFeat,value),subLabels)

    return myTree

